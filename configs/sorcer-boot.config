import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

import sorcer.resolver.Resolver;
import sorcer.core.SorcerEnv;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
    home = "${sorcer.home}";
    policy = "${java.security.policy}";
    ps = System.getProperty("path.separator");
     
    port = Booter.getWebsterPort(); 
    //port = 0;
    address = Booter.getWebsterInterface();
    startPort = Booter.getWebsterStartPort();
    endPort = Booter.getWebsterEndPort();

    standardProviderCodebase = Booter.resolveCodebase(new String[]{
        "org.sorcersoft.sorcer:sos-env",
        "org.sorcersoft.sorcer:sos-api",
        "org.sorcersoft.sorcer:sos-netlet",
        "org.codehaus.groovy:groovy-all",
        "org.sorcersoft.sorcer:sos-exertlet-sui",
        "net.jini.lookup:serviceui"
    });

    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up lib directories */
  	    new SorcerServiceDescriptor(
            null,
   			policy,
            Booter.resolveClasspath("org.sorcersoft.sorcer:sos-webster"),
			"sorcer.tools.webster.Webster", 
			new String[] { home + "/configs/webster/configs/webster-prv.config" }
        ),

	    new SorcerServiceDescriptor(
	      	Booter.resolveCodebase("org.apache.river:reggie-dl"),
            policy,
            Booter.resolveClasspath("org.apache.river:reggie"),
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "/configs/jini/configs/reggie.config" }
        ),
            
		new SorcerServiceDescriptor(
            Booter.resolveCodebase("org.apache.river:mahalo-dl"),
            policy,
            Booter.resolveClasspath("org.apache.river:mahalo"),
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "/configs/jini/configs/mahalo.config" }
        ),

        new SorcerServiceDescriptor(
            Booter.resolveCodebase("org.apache.river:fiddler-dl"),
            policy,
            Booter.resolveClasspath("org.apache.river:fiddler"),
            "com.sun.jini.fiddler.TransientFiddlerImpl",
            new String[] { home + "/configs/jini/configs/fiddler.config" }
        ),

        new SorcerServiceDescriptor(
            Booter.resolveCodebase("org.apache.river:mercury-dl"),
            policy,
            Booter.resolveClasspath("org.apache.river:mercury"),
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "/configs/jini/configs/mercury.config" }
        ),


        new SorcerServiceDescriptor(
            Booter.resolveCodebase("org.apache.river:norm-dl"),
            policy,
            Booter.resolveClasspath("org.apache.river:norm"),
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "/configs/jini/configs/norm.config" }
        ),
            
   		// Blitz
        new SorcerServiceDescriptor(
            Booter.resolveCodebase(new String[]{
                "org.sorcersoft.blitz:blitz-common",
                "org.sorcersoft.blitz:blitz-proxy",
                "net.jini.lookup:jmx-lookup",
                "org.apache.river:outrigger-dl",
                //"org.sorcersoft.blitz:blitz-dl",
 			    "org.sorcersoft.blitz:blitz-ui"
            }),
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.blitz:blitz-common",
                "org.sorcersoft.blitz:blitz-service",
                "org.sorcersoft.blitz:blitz-proxy",
            	//"org.sorcersoft.blitz:blitz",
            	"org.sorcersoft.blitz:blitz-ui",
            	"org.apache.river:outrigger-dl",
            	"com.sleepycat:je",
                "net.jini.lookup:jmx-lookup",
            	"net.jini.lookup:serviceui",
            	"net.jini:jsk-lib",
            	"net.jini:jsk-platform"
            }),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "/configs/blitz/configs/blitz.config" }
        ),

/*
		// MutualExclusion - Locker
 		new SorcerServiceDescriptor(
        "" + Resolver.resolveRelative("org.sorcersoft.lockmgr:lockmgr-proxy"),
        policy,
        ConfigUtil.concat(new Object[] {
            Resolver.resolveAbsolute("org.sorcersoft.lockmgr:lockmgr-api"), ps,
            Resolver.resolveAbsolute("org.sorcersoft.lockmgr:lockmgr-service"), ps,
            Resolver.resolveAbsolute("org.jgroups:jgroups:2.12.1.Final"), ps,
            Resolver.resolveAbsolute("org.dancres.blitz:blitzui"), ps,
            Resolver.resolveAbsolute("org.apache.river:outrigger-dl"), ps,
            Resolver.resolveAbsolute("net.jini:jsk-platform")
        }),
        "org.dancres.blitz.jini.lockmgr.ServerImpl",
         new String[] { home + "/configs/blitz/configs/lockmgr.config" }),
*/

   		// SORCER Job Service
        new SorcerServiceDescriptor(
            standardProviderCodebase,
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:jobber-prv"
            }),
            "sorcer.core.provider.jobber.ServiceJobber",
            new String[]{ home + "/configs/sos-providers/jobber.config" }
        ),

        // SORCER Space Service
        new SorcerServiceDescriptor(
            standardProviderCodebase,
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:spacer-prv"
            }),
            "sorcer.core.provider.jobber.ServiceSpacer",
            new String[]{ home + "/configs/sos-providers/spacer.config" }
        ),

        // SORCER Catalog Service
        new SorcerServiceDescriptor(
            standardProviderCodebase,
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:cataloger-prv",
                "org.sorcersoft.sorcer:cataloger-sui"
            }),
            "sorcer.core.provider.cataloger.ServiceCataloger",
            new String[]{ home + "/configs/sos-providers/cataloger.config" }
        ),

        // SORCER Logger Service
        new SorcerServiceDescriptor(
            Booter.resolveCodebase(new String[]{
                "net.jini.lookup:serviceui",
                "org.sorcersoft.sorcer:sos-platform",
                "org.sorcersoft.sorcer:sos-exertlet-sui",
                "org.sorcersoft.sorcer:logger-sui"
            }),
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:logger-prv",
                "org.sorcersoft.sorcer:logger-sui"
            }),
            "sorcer.core.provider.logger.RemoteLoggerManager",
            new String[]{ home + "/configs/sos-providers/logger.config" }
        ),

        // SORCER ExertMonitor Service
        new SorcerServiceDescriptor(
            standardProviderCodebase,
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:exertmonitor-prv",
                "com.sleepycat:je",
            }),
            "sorcer.core.provider.exertmonitor.ExertMonitor",
            new String[]{ home + "/configs/sos-providers/exertmonitor.config" }
        ),
       			
        // SORCER Database Store Service
        new SorcerServiceDescriptor(
            Booter.resolveCodebase(new String[]{
				"org.sorcersoft.sorcer:sorcer-api",
				"org.sorcersoft.sorcer:dbp-api"
			}),
            policy,
            Booter.resolveClasspath(new String[]{
                "org.sorcersoft.sorcer:commons-prv",
                "org.sorcersoft.sorcer:dbp-prv",
                "org.sorcersoft.sorcer:dbp-api",
                "com.sleepycat:je",
            }),
            "sorcer.core.provider.dbp.DatabaseProvider",
            new String[]{ home + "/configs/sos-providers/dbp.config" }
        ),

        // SORCER network exert manager
        new SorcerServiceDescriptor(
            standardProviderCodebase,
            policy,
            Booter.resolveClasspath("org.sorcersoft.sorcer:commons-prv"),
            "sorcer.core.provider.ServiceTasker",
            new String[]{ home + "/configs/sos-providers/exerter.config" }
        )
    };
}
