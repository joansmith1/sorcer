import java.net.URL;
import sorcer.provider.boot.Booter;

import sorcer.core.SorcerEnv;



sorcer.tools.codeserver {

    home = "${sorcer.home}";

    // for compatibility with old sorcer distro
    sorcerLibPath 	 = home + "${/}lib${/}sorcer";
    jiniLibPath 	 = home + "${/}lib${/}jini";
    rioLibPath 	     = home + "${/}lib${/}rio";
    rioResLibPath 	 = home + "${/}lib${/}rio-resolver";
    rioCybLibPath 	 = home + "${/}lib${/}rio-cybernode";
    rioMonLibPath 	 = home + "${/}lib${/}rio-monitor";
    riverLibPath 	 = home + "${/}lib${/}river";
    commonsLibPath 	 = home + "${/}lib${/}commons";
    jiniLookupLibPath= home + "${/}lib${/}jini-lookup";
    //

    //provider.webster.port
    websterPort = Booter.getWebsterPort();
    //websterPort = 0;
    //provider.webster
    websterAddress = Booter.getWebsterInterface();
    startPort = Booter.getWebsterStartPort();
    endPort = Booter.getWebsterEndPort();
    isDaemon = false;
    
    roots = Booter.getWebsterRoots(new String[] {
		sorcerLibPath,
		jiniLibPath,
		rioLibPath,
		rioResLibPath,
		rioCybLibPath,
		rioMonLibPath,
		jiniLookupLibPath,
		riverLibPath,
		commonsLibPath
    });
    
    options = new String[] { "-port", "" + websterPort, 
	    "-bindAddress", websterAddress, 
	    "-startPort", "" + startPort, 
	    "-endPort", "" + endPort, 
	    "-isDaemon", "" + isDaemon };
}

sorcer.core.service.ServiceBuilder{
	type = sorcer.tools.webster.WebsterStarter.class;
	export = false;
	register = false;
}