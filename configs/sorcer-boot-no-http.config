import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

import sorcer.resolver.Resolver;
import sorcer.core.SorcerEnv;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
    home = "${sorcer.home}";
    policy = "${java.security.policy}";
    ps = System.getProperty("path.separator");

    serviceDescriptors = new ServiceDescriptor[] {
/*
        new SorcerServiceDescriptor(
            "browser-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "${/}browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { home + "${/}configs${/}jini${/}configs${/}browser.config" }),
*/

	    new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:reggie-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:reggie"),
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}reggie.config" }),

		new SorcerServiceDescriptor(
	    	"" + Resolver.resolveRelative("org.apache.river:mahalo-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:mahalo"),
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}mahalo.config" }),


 /*       new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:fiddler-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:fiddler"),
           "com.sun.jini.fiddler.TransientFiddlerImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}fiddler.config" }),

        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:mercury-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:mercury"),
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}mercury.config" }),


        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:norm-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:norm"),
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}norm.config" }),

        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:outrigger-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:outrigger"),
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { home + "${/}configs${/}jini${/}configs${/}outrigger.config" }),

   */
   		// Blitz

        new SorcerServiceDescriptor(
 			"" + Resolver.resolveRelative("org.dancres.blitz:blitz-dl") +
 			" " + Resolver.resolveRelative("org.dancres.blitz:blitzui"),
            policy,
            ConfigUtil.concat(new Object[] {
            	Resolver.resolveAbsolute("org.dancres.blitz:blitz"), ps,
            	Resolver.resolveAbsolute("org.dancres.blitz:blitzui"), ps,
            	Resolver.resolveAbsolute("com.sleepycat:je"), ps,
            	Resolver.resolveAbsolute("net.jini.lookup:serviceui"), ps,
            	Resolver.resolveAbsolute("org.apache.river:outrigger-dl"), ps,
            	Resolver.resolveAbsolute("net.jini:jsk-platform")
            }),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}configs${/}blitz${/}configs${/}blitz.config" }),



		// MutualExclusion - Locker
 /* 		new SorcerServiceDescriptor(
           "" + Resolver.resolveRelative("org.sorcersoft.sorcer:locker"),
           policy,
            ConfigUtil.concat(new Object[] {
                Resolver.resolveAbsolute("org.sorcersoft.sorcer:locker"), ps,
            	Resolver.resolveAbsolute("org.jgroups:jgroups:2.12.1.Final"), ps,
            	Resolver.resolveAbsolute("org.dancres.blitz:blitzui"), ps,
            	Resolver.resolveAbsolute("org.apache.river:outrigger-dl"), ps,
                Resolver.resolveAbsolute("net.jini:jsk-platform")

            }),
            "org.dancres.blitz.jini.lockmgr.ServerImpl",
             new String[] { home + "${/}configs${/}blitz${/}configs${/}lockmgr.config" }),
  */

   		// SORCER Job Service 
       		SorcerDescriptorUtil.getJobber(
       			policy,
       			home + "${/}configs${/}sos-providers${/}jobber.config"),
   
     		// SORCER Space Service
       		SorcerDescriptorUtil.getSpacer(
       			policy,
       			home + "${/}configs${/}sos-providers${/}spacer.config"),

    
       		// SORCER Catalog Service
      		SorcerDescriptorUtil.getCataloger(
       			policy, 
       			home + "${/}configs${/}sos-providers${/}cataloger.config"),
     			
       		// SORCER Logger Service
       		SorcerDescriptorUtil.getLogger(
       			policy, 
       			home + "${/}configs${/}sos-providers${/}logger.config"),
      			
       		// SORCER ExertMonitor Service
       		SorcerDescriptorUtil.getExertMonitor(
       			policy, 
       			home + "${/}configs${/}sos-providers${/}exertmonitor.config"),
       			
       		// SORCER Database Store Service
       		SorcerDescriptorUtil.getDatabaseStorer(
       			policy, 
       			home + "${/}configs${/}sos-providers${/}dbp.config"),

       		/* SORCER network exert manager */
            SorcerDescriptorUtil.getExerter(
                policy,
                home + "${/}configs${/}sos-providers${/}exerter.config")
    };
}
